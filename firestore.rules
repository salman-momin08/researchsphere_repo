rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users Collection
    match /users/{userId} {
      // Authenticated users can read their own profile
      allow get: if request.auth != null && request.auth.uid == userId;
      // Authenticated users can create their own profile (on signup)
      // Ensure userId in the document matches the authenticated user
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      // Authenticated users can update their own profile (specific fields, cannot make themselves admin)
      allow update: if request.auth != null && request.auth.uid == userId && !(request.resource.data.isAdmin is bool);

      // Admins can read any user profile (for admin panel, etc.)
      allow list: if isAdmin(); // Admins can list all users
    }

    // Papers Collection
    match /papers/{paperId} {

      // Helper function to check if the requesting user is the owner of the paper
      function isPaperOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      // 1. Owner-based access for their own papers (any status)
      // This rule allows owners to read (get, list), update, and delete their own papers.
      // For 'list', this works because the client-side query for a user's papers will be
      // filtered by 'userId', so every document considered by this rule during a list operation
      // will satisfy 'resource.data.userId == request.auth.uid'.
      allow get, list, update, delete: if isPaperOwner();

      // Owners can create papers for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // 2. Admin access to any paper
      // Admins can perform any operation (read, write) on any paper.
      allow read, write: if isAdmin(); // 'read' covers get, list. 'write' covers create, update, delete.

      // 3. Authenticated users can read (get, list) PUBLISHED papers (for search functionality)
      // This rule allows any authenticated user to read papers whose status is 'Published'.
      // For 'list', this means that if this rule is the one granting permission,
      // all documents returned by the query must have status == 'Published'.
      // This is suitable for the search page which explicitly queries for published papers.
      allow get, list: if request.auth != null && resource.data.status == 'Published';
    }
  }
}
