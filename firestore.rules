
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection:
    // - Authenticated users can create their own user document upon signup.
    // - Authenticated users can read, update, and delete their own user document.
    // - No one else can read/write other users' documents unless they are an admin (admin rule not explicitly shown here for users collection, typically admins use trusted server environments or specific admin roles).
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Papers Collection (Example):
    // - Authenticated users can create new papers.
    // - Users can read their own papers.
    // - Users can update or delete their own papers.
    // - Admin users (identified by an 'isAdmin' field in their user document) can read, update, or delete any paper.
    match /papers/{paperId} {
      allow create: if request.auth != null;
      
      // Allow read if the user is the owner OR if the user is an admin
      allow read: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      // Allow update/delete if the user is the owner OR if the user is an admin
      allow update, delete: if request.auth != null &&
                              (resource.data.userId == request.auth.uid ||
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    // Add rules for other collections as your application grows.
    // For example, if you have a 'reviews' collection:
    // match /reviews/{reviewId} {
    //   // Define who can read/write reviews
    // }
  }
}
