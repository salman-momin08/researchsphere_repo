
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection rules
    match /users/{userId} {
      // Allow users to read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow users to create their own document upon signup.
      // Ensure the document ID matches the authenticated user's ID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own document.
      // You might want to add more granular field-level validation here
      // (e.g., user cannot change their isAdmin status).
      allow update: if request.auth != null && request.auth.uid == userId;

      // Generally, disallow client-side deletion of user documents for safety.
      // Deletion should be handled by admin tools or server-side functions if needed.
      allow delete: if false;
    }

    // Papers collection rules (example, adjust to your needs)
    match /papers/{paperId} {
      // Allow authenticated users to create a paper if the paper's userId matches their auth uid.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Allow users to read their own papers.
      // Allow users marked as admin (in their Firestore user document) to read any paper.
      allow read: if request.auth != null &&
                    (resource.data.userId == request.auth.uid ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);

      // Allow users to update their own papers.
      // Allow users marked as admin to update any paper.
      allow update: if request.auth != null &&
                      (resource.data.userId == request.auth.uid ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);

      // Disallow client-side deletion of papers for now.
      allow delete: if false;
    }

    // Add rules for other collections as needed.

    // Default deny: By default, no one can read or write to any other path.
    // This is important for security.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
    // Note: The above default deny is implicit if no other rules match.
    // It's good practice to be explicit if you have complex rules,
    // but for now, focusing on /users and /papers is key.
  }
}
