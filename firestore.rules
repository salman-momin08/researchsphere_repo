rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    // Only authenticated users can interact with their own documents.
    // Admins have broader access.
    match /users/{userId} {
      // Allow users to read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their own document (e.g., during signup).
      // The document ID must match the authenticated user's UID.
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own document.
      // Consider which fields are updatable by the user vs. admin.
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read and write any user document.
      // This requires an `isAdmin` field in the admin's user document.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Generally, users should not be able to delete their own accounts directly through Firestore rules.
      // Account deletion should be handled via Firebase Auth and a Cloud Function if cleanup is needed.
      allow delete: if false; // Or restrict to admins: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Papers collection
    // Authenticated users can manage their own papers.
    // Admins have broader access.
    match /papers/{paperId} {
      // Allow authenticated users to create papers if they are the owner.
      // The `userId` in the paper document must match the authenticated user's UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow authenticated users to read papers if they are the owner OR if the paper is marked as public (if such a field exists).
      // For now, only owners can read.
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow authenticated users to update their own papers.
      // Consider field-level security for status updates (e.g., only admin can change status to 'Accepted').
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow authenticated users to delete their own papers.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Admins can read, write, and delete any paper.
      allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
// IMPORTANT: Deploy these rules to your Firebase project using the Firebase CLI or the Firebase Console.
// Firebase CLI: firebase deploy --only firestore:rules
