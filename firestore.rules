rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      // Check if the user is authenticated, their user document exists, and has isAdmin == true
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // Authenticated users can read their own profile.
      // Admins can read any user profile.
      allow get: if isOwner(userId) || isAdmin();

      // Allow creating own user document during signup.
      // - The userId in the path must match the authenticated user's UID.
      // - The 'id' field in the document data must also match the UID.
      // - Users cannot set 'isAdmin' to true during creation via this rule.
      //   (Initial admin setup is typically manual or via a trusted backend process/special email).
      allow create: if isOwner(userId) &&
                       request.resource.data.id == request.auth.uid &&
                       (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false);

      // Allow authenticated users to update their own profile.
      // - They cannot change their 'id' or 'email' if these fields are stored in the document.
      // - They cannot change their 'isAdmin' status.
      allow update: if isOwner(userId) &&
                       (!('id'      in request.resource.data) || request.resource.data.id      == resource.data.id) &&
                       (!('email'   in request.resource.data) || request.resource.data.email   == resource.data.email) &&
                       (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.isAdmin);

      // Allow authenticated users to query the users collection.
      // This is necessary for client-side uniqueness checks (e.g., username, phone number).
      // Client-side queries should be specific (e.g., .where('username', '==', valueToCheck)).
      allow list: if request.auth != null;
    }

    // Papers collection is currently handled by mock data on the client-side.
    // If papers were to be stored in Firestore, their rules would go here.
    // Example (if papers were in Firestore):
    // match /papers/{paperId} {
    //   function isPaperOwner() {
    //     return request.auth != null && resource.data.userId == request.auth.uid;
    //   }
    //   allow read: if isPaperOwner() || isAdmin() || resource.data.status == 'Published';
    //   allow list: if isPaperOwner() || isAdmin() || request.query.filters.find(f => f[0] == 'status' && f[2] == 'Published') != null;
    //   allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    //   allow update, delete: if isPaperOwner() || isAdmin();
    // }
  }
}
