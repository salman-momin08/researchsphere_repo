
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      // Check if the requesting user exists and has isAdmin == true in their user document
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isPaperOwner() {
      return request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Users Collection
    match /users/{userId} {
      // 1. Authenticated users can read their own profile.
      // 2. Admins can read any user profile.
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // 3. Any authenticated user can list user data (needed for client-side uniqueness checks on username/phone).
      // Consider if this needs to be more restrictive based on query.
      allow list: if request.auth != null;

      // Authenticated users can create their own profile document during signup.
      // The userId in the document must match their auth uid.
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.userId == request.auth.uid;

      // Authenticated users can update their own profile.
      // They cannot change their isAdmin status through this rule.
      // If isAdmin field is present in the update, its value must match existing or not be present.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.isAdmin);
    }

    // Papers Collection
    match /papers/{paperId} {
      // Read operations (get)
      allow get: if (isPaperOwner() || isAdmin() || (request.auth != null && resource.data.status == 'Published'));

      // List operations
      // Admins can list all papers.
      // Authenticated users can list their own papers (client query must filter by userId).
      // Authenticated users can list published papers (client query must filter by status == 'Published').
      allow list: if request.auth != null &&
                     (isAdmin() ||
                      (resource.data.userId == request.auth.uid) || // Allows listing for owner if query is open, client should filter
                      (resource.data.status == 'Published')       // Allows listing for anyone if query is open, client should filter
                     );
      // Note: For `list` rules, if you want to enforce that queries *must* include specific filters
      // (e.g., user must query `where('userId', '==', request.auth.uid)`),
      // you'd use `request.query.filters` or check `request.query.resource.data.userId == request.auth.uid`.
      // The current rule is more permissive at the rule level, relying on client queries.

      // Create operations
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Update and Delete operations
      allow update, delete: if isPaperOwner() || isAdmin();
    }
  }
}
