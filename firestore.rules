
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      // Check if user is authenticated and their document in 'users' collection exists and has isAdmin == true
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users Collection
    match /users/{userId} {
      // Authenticated users can read their own profile.
      // Admins can read any user profile.
      // Any authenticated user can list user data (needed for client-side uniqueness checks).
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if request.auth != null; // For username/phone uniqueness checks during signup/update

      // Authenticated users can create their own profile document during signup.
      // The userId in the document must match their auth uid.
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.userId == request.auth.uid;

      // Authenticated users can update their own profile.
      // They cannot change their isAdmin status.
      // If isAdmin field is present in the update, its value must match existing.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.isAdmin);
    }

    // Papers Collection
    match /papers/{paperId} {
      // CREATE
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // READ (GET single document)
      allow get: if resource.data.status == 'Published' || // Anyone can read a published paper
                (request.auth != null && resource.data.userId == request.auth.uid) || // Owner can read their paper
                (isAdmin()); // Admin can read any paper

      // LIST (Query multiple documents)
      allow list: if
        // Case 1: Admin is listing (can list anything)
        (isAdmin()) ||
        // Case 2: Authenticated user listing their own papers
        (request.auth != null && resource.data.userId == request.auth.uid) ||
        // Case 3: Anyone (authenticated or not) listing published papers.
        // The client query MUST filter for status == 'Published' for this to be effective.
        // The rule checks each document that would be returned by the query.
        (resource.data.status == 'Published');

      // UPDATE, DELETE
      allow update, delete: if (request.auth != null && resource.data.userId == request.auth.uid) || // Owner can update/delete
                               (isAdmin()); // Admin can update/delete
    }
  }
}
