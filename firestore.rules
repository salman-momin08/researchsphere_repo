rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // WARNING: The following rule is very permissive and is generally
    // suitable for initial development ONLY.
    // It allows any authenticated user to read and write to any document.
    // For production, you MUST define more granular and secure rules.
    // match /{document=**} {
    //   allow read, write: if request.auth != null;
    // }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can read their own profile.
      // Users can update their own profile (displayName, username, phoneNumber, institution, role, researcherId).
      // Admins can read any user profile.
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth != null; // Allows a user to create their own profile document upon signup.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['displayName', 'username', 'phoneNumber', 'institution', 'role', 'researcherId', 'photoURL', 'email', 'id', 'isAdmin']); // Restrict updatable fields
      // allow delete: if request.auth != null && request.auth.uid == userId; // Usually users don't delete their own accounts directly via Firestore rules.
    }

    // Rules for the 'papers' collection
    match /papers/{paperId} {
      // Any authenticated user can create a paper.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Authenticated users can read papers.
      // (Consider if all papers should be readable by all authenticated users,
      // or if only authors/admins or public papers should be readable).
      allow read: if request.auth != null;

      // Only the author of the paper or an admin can update or delete it.
      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}